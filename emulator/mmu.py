
from emulator import utils

class MMU():
    # Flag indicating BIOS is mapped in
    # BIOS is unmapped with the first instruction above 0x00FF
    inbios = 1

    # Memory regions (initialised at reset time)
    bios = [
        0x31, 0xFE, 0xFF, 0xAF, 0x21, 0xFF, 0x9F, 0x32, 0xCB, 0x7C, 0x20, 0xFB, 0x21, 0x26, 0xFF, 0x0E,
        0x11, 0x3E, 0x80, 0x32, 0xE2, 0x0C, 0x3E, 0xF3, 0xE2, 0x32, 0x3E, 0x77, 0x77, 0x3E, 0xFC, 0xE0,
        0x47, 0x11, 0x04, 0x01, 0x21, 0x10, 0x80, 0x1A, 0xCD, 0x95, 0x00, 0xCD, 0x96, 0x00, 0x13, 0x7B,
        0xFE, 0x34, 0x20, 0xF3, 0x11, 0xD8, 0x00, 0x06, 0x08, 0x1A, 0x13, 0x22, 0x23, 0x05, 0x20, 0xF9,
        0x3E, 0x19, 0xEA, 0x10, 0x99, 0x21, 0x2F, 0x99, 0x0E, 0x0C, 0x3D, 0x28, 0x08, 0x32, 0x0D, 0x20,
        0xF9, 0x2E, 0x0F, 0x18, 0xF3, 0x67, 0x3E, 0x64, 0x57, 0xE0, 0x42, 0x3E, 0x91, 0xE0, 0x40, 0x04,
        0x1E, 0x02, 0x0E, 0x0C, 0xF0, 0x44, 0xFE, 0x90, 0x20, 0xFA, 0x0D, 0x20, 0xF7, 0x1D, 0x20, 0xF2,
        0x0E, 0x13, 0x24, 0x7C, 0x1E, 0x83, 0xFE, 0x62, 0x28, 0x06, 0x1E, 0xC1, 0xFE, 0x64, 0x20, 0x06,
        0x7B, 0xE2, 0x0C, 0x3E, 0x87, 0xF2, 0xF0, 0x42, 0x90, 0xE0, 0x42, 0x15, 0x20, 0xD2, 0x05, 0x20,
        0x4F, 0x16, 0x20, 0x18, 0xCB, 0x4F, 0x06, 0x04, 0xC5, 0xCB, 0x11, 0x17, 0xC1, 0xCB, 0x11, 0x17,
        0x05, 0x20, 0xF5, 0x22, 0x23, 0x22, 0x23, 0xC9, 0xCE, 0xED, 0x66, 0x66, 0xCC, 0x0D, 0x00, 0x0B,
        0x03, 0x73, 0x00, 0x83, 0x00, 0x0C, 0x00, 0x0D, 0x00, 0x08, 0x11, 0x1F, 0x88, 0x89, 0x00, 0x0E,
        0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99, 0xBB, 0xBB, 0x67, 0x63, 0x6E, 0x0E, 0xEC, 0xCC,
        0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E, 0x3c, 0x42, 0xB9, 0xA5, 0xB9, 0xA5, 0x42, 0x4C,
        0x21, 0x04, 0x01, 0x11, 0xA8, 0x00, 0x1A, 0x13, 0xBE, 0x20, 0xFE, 0x23, 0x7D, 0xFE, 0x34, 0x20,
        0xF5, 0x06, 0x19, 0x78, 0x86, 0x23, 0x05, 0x20, 0xFB, 0x86, 0x20, 0xFE, 0x3E, 0x01, 0xE0, 0x50
    ]
    rom  = [] # Rom 32KB
    wram = [] # Working RAM 8KB
    vram = [] # Video RAM 8KB
    eram = [] # External RAM 8KB
    oam  = [] # OAM (Object Attribute Memory) RAM 8KB
    zram = [] # Zero Page RAM 8KB

    def __init__(self, cpu):
        self.cpu = cpu
        self.rom = utils.zerolistmaker(32768)
        self.wram = utils.zerolistmaker(8192)
        self.vram = utils.zerolistmaker(8192)
        self.eram = utils.zerolistmaker(8192)
        self.oam = utils.zerolistmaker(160)
        self.zram = utils.zerolistmaker(128)

    # Read 8-bit byte from a given address
    def rb(self, addr):
        addr_mask = addr & 0xF000
        if addr_mask == 0x0000: # BIOS (256B)/ROM0
            if self.inbios:
                if addr < 0x0100:
                    return self.bios[addr]
                elif(self.cpu.registers['PC'] == 0x0100):
                    self.inbios = 0
            return self.rom[addr]
        elif addr_mask in [0x1000, 0x2000, 0x3000]: # ROM0 (16KB)
            return self.rom[addr]
        elif addr_mask in [0x4000, 0x5000, 0x6000, 0x7000]: # ROM1 (unbanked) (16KB)
            return self.rom[addr]
        elif addr_mask in [0x8000, 0x9000]: # Graphics: VRAM (8KB)
            return self.vram[addr & 0x1FFF]
        elif addr_mask in [0xA000, 0xB000]: # External RAM (8KB)
            return self.eram[addr & 0x1FFF]
        elif addr_mask in [0xC000, 0xD000]: # Working RAM (8KB)
            return self.wram[addr & 0x1FFF]
        elif addr_mask in [0xE000]: # Working RAM shadow
            return self.wram[addr & 0x1FFF]
        elif addr_mask in [0xF000]: # Working RAM shadow, OAM RAM, I/O, Zero-page RAM (HRAM)
            addr_mask &= 0x0F00

            if addr_mask in [0x000, 0x100, 0x200, 0x300, 0x400, 0x500, 0x600, 0x700, 0x800, 0x900, 0xA00, 0xB00, 0xC00, 0xD00]: # Working RAM
                return self.wram[addr & 0x1FFF]
            elif addr_mask in [0xE00]: # Graphics: object attribute memory
                # OAM is 160 bytes, remaining bytes read as 0
                if addr < 0xFEA0:
                    return self.oam[addr & 0xFF]
                else:
                    return 0
            elif addr_mask in [0xF00]: # Zero-page (HRAM)
                if addr >= 0xFF80:
                    return self.zram[addr & 0x7F]
                else:
                    # I/O control handling
			        # Currently unhandled
                    return 0

    # Read 16-bit word from a given address
    def rw(self, addr):
        return self.rb(addr) + (self.rb(addr+1) << 8)

    # Write 8-bit byte to a given address
    def wb(self, addr, val):
        addr_mask = addr & 0xF000
        if addr_mask == 0x0000: # BIOS (256B)/ROM0
            if self.inbios and addr < 0x0100:
                return
            # fall through
        elif addr_mask in [0x1000, 0x2000, 0x3000]: # ROM0 (16k)
            return
        elif addr_mask in [0x4000, 0x5000, 0x6000, 0x7000]:   # ROM1 (unbanked) (16k)
            return
        elif addr_mask in [0x8000, 0x9000]: # Graphics: wram (8k)
            # Write to GPU
            return
        elif addr_mask in [0xA000, 0xB000]: # External RAM (8k) Writable
            self.eram[addr & 0x1FFF] = val
        elif addr_mask in [0xC000, 0xD000]: # Working RAM (8k)
            self.wram[addr & 0x1FFF] = val
        elif addr_mask in [0xE000]: # Working RAM shadow
            self.wram[addr & 0x1FFF] = val
        elif addr_mask in [0xF000]: # Working RAM shadow, OAM RAM, I/O, Zero-page RAM (HRAM)
            addr_mask = addr & 0x0F00
            if addr_mask in [0x000, 0x100, 0x200, 0x300, 0x400, 0x500, 0x600, 0x700, 0x800, 0x900, 0xA00, 0xB00, 0xC00, 0xD00]: # Working RAM Shadow
                self.wram[addr & 0x1FFF] = val
            elif addr_mask in [0xE00]: # Graphics: object attribute memory
                # OAM is 160 bytes, remaining bytes read as 0
                if addr < 0xFEA0:
                    # Write to GPU OAM
                    pass
                # Update GPU OAM
            elif addr_mask in [0xF00]: # Zero-page (HRAM)
                self.zram[addr & 0x7F] = val

    # Write 16-bit word to a given address
    def ww(self, addr, val):
        self.wb(addr, val & 255)
        self.wb(addr+1, val >> 8)

    def load(self, filename):
        with open(filename, "rb") as file:
            byte_data = file.read()
            int_data = list(byte_data)
            self.rom = int_data

    def reset(self):
        for i in range(0, 8192):
            self.wram[i] = 0
            self.eram[i] = 0

        for i in range(0, 127):
            self.zram[i] = 0

        self.inbios = 0
